// 1 - Fa√ßa as modifica√ß√µes necess√°rias na fun√ß√£o para que o seu comportamento respeite o escopo no qual cada vari√°vel foi declarada.
// * Modifique a estrutura da fun√ß√£o para que ela seja uma arrow function .
// * Modifique as concatena√ß√µes para template literals.
// * Copie o c√≥digo abaixo.
const testingScope = escopo => {

  if (escopo) {
    let ifScope = 'N√£o devo ser utilizada fora do meu escopo (if)';
    ifScope = ifScope + ' √≥timo, fui utilizada no escopo !';
    console.log(ifScope);
  } else {
    const elseScope = 'N√£o devo ser utilizada fora meu escopo (else)';
    console.log(elseScope);
  }
}

testingScope(true);

// 2 - Copie o c√≥digo abaixo e fa√ßa uma fun√ß√£o que retorne o array oddsAndEvens em ordem crescente.
// * Utilize template literals para que a chamada console.log(<seu c√≥digo>oddsAndEvens<seu c√≥digo>); retorne "Os n√∫meros 2,3,4,7,10,13 se encontram ordenados de forma crescente!".
// * B√¥nus (opcional): tente fazer o mesmo exerc√≠cio utilizando o m√©todo array.sort() . Spoiler: √â poss√≠vel realizar uma fun√ß√£o que ordene qualquer array de n√∫meros.
// * Copie o c√≥digo abaixo.

const oddsAndEvens = [13, 3, 4, 10, 7, 2];

// Seu c√≥digo aqui.
const sortArray = () => {
  oddsAndEvens[0] = 2;
  oddsAndEvens[1] = 3;
  oddsAndEvens[2] = 4;
  oddsAndEvens[3] = 7;
  oddsAndEvens[4] = 10;
  oddsAndEvens[5] = 13;

  return oddsAndEvens;
}

console.log(`Escrito da maneira dificil e levando em considera√ß√£o somente um array especifico: ${sortArray()}`); // ser√° necess√°rio alterar essa linha üòâ

const sortArray2 = array => {
  const sortArray = array.sort((num1, num2) => num1 - num2);
  return sortArray;
}
console.log(`Escrito de forma din√¢mica que serviria para outros arrays: ${sortArray2(oddsAndEvens)}`);

console.log(`C√≥digo escrito em uma linha, din√¢mico: ${oddsAndEvens.sort((num1, num2) => num1 - num2)}`);